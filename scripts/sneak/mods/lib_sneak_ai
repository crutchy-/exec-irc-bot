<?php

#####################################################################################################

function init_ai()
{
  global $player_data;
  $ai_accounts=array("AI_Player_1","AI_Player_2","AI_Player_3","AI_Player_4","AI_Player_5");
  for ($i=0;$i<count($ai_accounts);$i++)
  {
    player_init($ai_accounts[$i]);
    $player_data[$ai_accounts[$i]]["flags"]["logging"]="";
    unset($player_data[$ai_accounts[$i]]["flags"]["irc_messages"]);
  }
}

#####################################################################################################

function test_ai($turns)
{
  $ai_accounts=array("AI_Player_1","AI_Player_2","AI_Player_3","AI_Player_4","AI_Player_5");
  for ($n=1;$n<=$turns;$n++)
  {
    for ($i=0;$i<count($ai_accounts);$i++)
    {
      move_ai($ai_accounts[$i]);
    }
  }
  irciv_privmsg("ai player moves complete");
}

#####################################################################################################

function move_ai($account)
{
  global $player_data;
  global $map_data;
  if (player_ready($account)==False)
  {
    irciv_privmsg("player $account not ready");
    return;
  }
  unset($player_data[$account]["path"]);
  if (isset($player_data[$account]["active"])==False)
  {
    irciv_privmsg("player $account has no active unit");
    return;
  }
  $active=$player_data[$account]["active"];
  $start=array();
  $start["x"]=$player_data[$account]["units"][$active]["x"];
  $start["y"]=$player_data[$account]["units"][$active]["y"];
  $paths=array();
  foreach ($player_data as $enemy_account=>$enemy_data)
  {
    if ($enemy_account==$account)
    {
      continue;
    }
    $path=array();
    $finish=array();
    $finish["x"]=$player_data[$enemy_account]["units"][0]["x"];
    $finish["y"]=$player_data[$enemy_account]["units"][0]["y"];
    if (find_path($path,$start,$finish)==False)
    {
      $player_data[$account]["status_messages"][]="no path exists between $account and $enemy_account";
      status($account);
      continue;
    }
    if (count($path)<=1)
    {
      $player_data[$account]["status_messages"][]="no path exists between $account and $enemy_account";
      status($account);
      continue;
    }
    $paths[]=$path;
  }
  $min_path_length=$map_data["cols"]*$map_data["rows"];
  $min_path=-1;
  for ($i=0;$i<count($paths);$i++)
  {
    if (count($paths[$i])<$min_path_length)
    {
      $min_path=$i;
      $min_path_length=count($paths[$i]);
    }
  }
  if ($min_path>=0)
  {
    $player_data[$account]["path"]=$paths[$min_path];
    $dir=$paths[$min_path][1]["dir"];
    move_active_unit($account,$dir);
  }
}

#####################################################################################################

$find_path=function(&$map_data,&$path,$start,$finish)
{
  # up,right,down,left
  $dir_x=array(0,1,0,-1);
  $dir_y=array(-1,0,1,0);
  $path=array();
  $locations=array();
  $cols=$map_data["cols"];
  $rows=$map_data["rows"];
  if (($start["x"]<0) or ($start["x"]>=$cols) or ($finish["x"]<0) or ($finish["x"]>=$cols) or ($start["y"]<0) or ($start["y"]>=$rows) or ($finish["y"]<0) or ($finish["y"]>=$rows))
  {
    # invalid start or finish coordinate(s)
    return False;
  }
  $coord_start=map_coord($cols,$start["x"],$start["y"]);
  $coord_finish=map_coord($cols,$finish["x"],$finish["y"]);
  if ($map_data["coords"][$coord_start]<>$map_data["coords"][$coord_finish])
  {
    # start and finish coordinates are on different terrain
    return False;
  }
  # initialize the direction map with X (no direction)
  $direction_map=str_repeat("X",strlen($map_data["coords"]));
  $location_index=-1;
  $currrent_location=$start;
  do
  {
    # test for traversable locations in all directions around the current location
    for ($direction=0;$direction<count($dir_x);$direction++)
    {
      $x=$currrent_location["x"]+$dir_x[$direction];
      $y=$currrent_location["y"]+$dir_y[$direction];
      # if the point at ($x, $y) is traversable, add it to the locations array if it hasn't already been added, and add the direction relative to the current location to the direction map
      if (($x>=0) and ($y>=0) and ($x<$cols) and ($y<$rows))
      {
        $coord=map_coord($cols,$x,$y);
        if (($map_data["coords"][$coord_start]==$map_data["coords"][$coord]) and ($direction_map[$coord]=="X"))
        {
          $locations[]=array("x"=>$x,"y"=>$y);
          $direction_map[$coord]=$direction;
        }
      }
    }
    # the current location has been fully tested. move on to the next traversable location stored in the locations array
    $location_index++;
    if ($location_index>=count($locations))
    {
      # run out of locations to test and finish hasn't been found
      return False;
    }
    $currrent_location=$locations[$location_index];
  }
  # if the current location is the same as the finish location, a path has been found (break from the searching loop)
  while (($currrent_location["x"]<>$finish["x"]) or ($currrent_location["y"]<>$finish["y"]));
  $inverse_path=array();
  $direction=$direction_map[map_coord($cols,$currrent_location["x"],$currrent_location["y"])];
  $inverse_path[]=array("x"=>$currrent_location["x"],"y"=>$currrent_location["y"],"dir"=>$direction);
  # start from the finish and work back to the start, following the inverted directions and adding locations as you go
  do
  {
    # to invert the direction, subtract the ordinal in the directions array instead of adding it
    $currrent_location["x"]=$currrent_location["x"]-$dir_x[$direction];
    $currrent_location["y"]=$currrent_location["y"]-$dir_y[$direction];
    $direction=$direction_map[map_coord($cols,$currrent_location["x"],$currrent_location["y"])];
    $inverse_path[]=array("x"=>$currrent_location["x"],"y"=>$currrent_location["y"],"dir"=>$direction);
  }
  # when the start location is reached, break from the loop
  while (($currrent_location["x"]<>$start["x"]) or ($currrent_location["y"]<>$start["y"]));
  for ($i=count($inverse_path)-1;$i>=0;$i--)
  {
    $path[]=$inverse_path[$i];
  }
  return True;
};

#####################################################################################################

?>
